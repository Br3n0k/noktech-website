---
import { getLanguageFromURL, useTranslations } from '../i18n/utils';

const currentPath = Astro.url.pathname;
const lang = getLanguageFromURL(currentPath);
const t = useTranslations(lang);

const stats = [
  {
    key: 'clients',
    value: t('hero.stats.clients.value'),
    label: t('hero.stats.clients.label')
  },
  {
    key: 'projects',
    value: t('hero.stats.projects.value'),
    label: t('hero.stats.projects.label')
  },
  {
    key: 'years',
    value: t('hero.stats.years.value'),
    label: t('hero.stats.years.label')
  },
  {
    key: 'satisfaction',
    value: t('hero.stats.satisfaction.value'),
    label: t('hero.stats.satisfaction.label')
  }
];
---

<section class="relative min-h-[90vh] flex items-center bg-dark overflow-hidden">
  <!-- Grid Pattern Background -->
  <div class="absolute inset-0 bg-grid-pattern opacity-[0.03]"></div>

  <!-- Gradient Orbs -->
  <div class="absolute top-0 -right-40 w-[500px] h-[500px] bg-primary/20 rounded-full filter blur-[120px]"></div>
  <div class="absolute -bottom-40 -left-40 w-[500px] h-[500px] bg-primary/10 rounded-full filter blur-[120px]"></div>

  <div class="container mx-auto px-4 relative z-10 py-20">
    <div class="max-w-4xl mx-auto text-center">
      <!-- Título Principal -->
      <h1 class="text-4xl md:text-6xl lg:text-7xl font-bold mb-6 leading-tight">
        <span class="text-white">{t('hero.title.start')} </span>
        <span class="text-transparent bg-clip-text bg-gradient-to-r from-primary to-primary-light">
          {t('hero.title.highlight')}
        </span>
        <span class="text-white"> {t('hero.title.end')}</span>
      </h1>

      <!-- Subtítulo -->
      <p class="text-xl md:text-2xl text-gray-400 mb-12 max-w-3xl mx-auto">
        {t('hero.subtitle')}
      </p>

      <!-- Botões de Ação -->
      <div class="flex flex-col sm:flex-row gap-4 justify-center mb-20">
        <a
          href="#contact"
          class="inline-flex items-center justify-center px-8 py-3 text-base font-medium text-white bg-primary hover:bg-primary-dark rounded-lg transition-all duration-300 transform hover:-translate-y-1 hover:shadow-[0_0_20px_rgba(255,0,0,0.3)]"
        >
          {t('hero.cta.primary')}
          <svg class="w-5 h-5 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3"></path>
          </svg>
        </a>
        <a 
          href="#portfolio"
          class="inline-flex items-center justify-center px-8 py-3 text-base font-medium text-white bg-dark-lighter hover:bg-dark-card border border-dark-border rounded-lg transition-all duration-300 transform hover:-translate-y-1"
        >
          {t('hero.cta.secondary')}
        </a>
      </div>

      <!-- Estatísticas -->
      <div class="grid grid-cols-2 md:grid-cols-4 gap-8 mt-16">
        {stats.map((stat) => (
          <div class="text-center group">
            <div class="relative">
              <div class="absolute inset-0 bg-gradient-to-r from-primary/20 to-primary-light/20 rounded-lg filter blur-md opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
              <div class="relative bg-dark-lighter rounded-lg p-6 border border-dark-border group-hover:border-primary/50 transition-colors">
                <p class="text-4xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-primary to-primary-light mb-2">
                  {stat.value}
                </p>
                <p class="text-gray-400 text-sm">
                  {stat.label}
                </p>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  </div>
</section> 